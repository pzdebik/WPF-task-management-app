<Window x:Class="ToDoWpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mw="clr-namespace:ToDoWpfApp.ViewModel"
        xmlns:local="clr-namespace:ToDoWpfApp"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        Title="OneTask" Height="600" Width="600" WindowStartupLocation="CenterScreen">
    <Window.DataContext>
        <mw:TaskManager/>
    </Window.DataContext>
    <Window.Resources>
        <Style x:Name="buttonStyle" TargetType="Button">
            <Setter Property="Margin" Value="15"/>
            <Setter Property="Width" Value="110"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Cursor" Value="Hand"/>
        </Style>
        <Style x:Name="windowStyle" TargetType="Window">
            <Setter Property="FontFamily" Value="Calibri"/>
            <Setter Property="FontSize" Value="14" />
        </Style>
        <BooleanToVisibilityConverter x:Key="boolToVisibility"/>
        <local:BoolToBrushConverter x:Key="isDoneToBrush"/>
        <local:BoolToBrushConverter x:Key="isOverdueToBrush" FalseColor="LightGreen" TrueColor="Red"/>
        <local:TaskConverter x:Key="createTask"/>
        <Style TargetType="{x:Type DatePickerTextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <TextBox Text="{Binding Path=SelectedDate, StringFormat={}{0:dd MMMM yyyy}, ConverterCulture=pl-PL, RelativeSource={RelativeSource AncestorType={x:Type DatePicker}}}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <ControlTemplate x:Key="RoundedButton" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <Style x:Key="RoundedTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <!-- Jeśli zamknę aplikację to zapisze do pliku (dzięki zainstalowanej paczce xaml.behaviour)-->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding Save}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid Background="#FFF0F0F0">
        <Grid.RowDefinitions>
            <RowDefinition Height="285*"/>
            <RowDefinition Height="199*"/>
        </Grid.RowDefinitions>
        <TextBlock Margin="10,10,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Text="Liczba zadań: ">
            <Run Text="{Binding Path=TaskList.Count, Mode=OneWay}"/>
        </TextBlock>

        <ListBox x:Name="lbTaskList" Margin="10,61,10,0"
                 ItemsSource="{Binding Path=TaskList}" Height="283" Grid.RowSpan="2" VerticalAlignment="Top" Background="White" BorderBrush="White">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Vertical" Margin="3">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Path=Name, Mode=OneWay}" 
                                       FontSize="14"/>

                            <Button Content="Zrobione" 
                                    Command="{Binding Path=SetCompleted}"
                                    Visibility="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Mode=OneWay, Converter={StaticResource boolToVisibility}}" 
                                    Margin="60,0,0,0"
                                    Width="80" Height="20"
                                    Template="{DynamicResource RoundedButton}"/>
                            <Button Content="Nie Zrobione"
                                    Command="{Binding Path=SetNotCompleted}"
                                    Visibility="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Mode=OneWay, Converter={StaticResource boolToVisibility}}"
                                    Margin="60,0,0,0"
                                    Width="90" Height="20"
                                    Template="{DynamicResource RoundedButton}"/>
                        </StackPanel>
                        <TextBlock>
                            Termin: <Run Text="{Binding Path=Date, Mode=OneWay, StringFormat={}{0:dd MMM yyyy}, ConverterCulture=pl-PL}" 
                                         Foreground="{Binding IsOverdue, Mode=OneWay, Converter={StaticResource isOverdueToBrush}}"/>
                            Priorytet: <Run Text="{Binding Path=TaskPriority, Mode=OneWay}"/>
                        </TextBlock>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <EventSetter Event="MouseDoubleClick" Handler="ListBoxItem_MouseDoubleClick"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="BorderThickness" Value="0 0 0 1"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="LightGray"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ListBox.ItemContainerStyle>
            <!-- Po podwójnym kliknięciu na zadanie odpala się okno EditTask z wszystkim danymi klikniętego taska-->
            <!--<i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding ShowTask}"
                                           CommandParameter="{Binding ElementName=lbTaskList, Path=SelectedIndex}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>-->
        </ListBox>

        <Button Content="Usuń Zadanie" 
                HorizontalAlignment="Left"
                Margin="28,27,0,0"
                Width="120" Height="35"
                Template="{DynamicResource RoundedButton}"
                Command="{Binding RemoveTask}"
                CommandParameter="{Binding ElementName=lbTaskList, Path=SelectedIndex}" Grid.Row="1" 
                Foreground="White" Background="#FFCF6679" FontWeight="Bold"/>

        <Button Content="Edytuj zadanie"
                Margin="0,32,23,0" 
                Template="{DynamicResource RoundedButton}"
                Command="{Binding UpdateTask}"
                CommandParameter="{Binding ElementName=lbTaskList, Path=SelectedIndex}" Grid.Row="1"/>

        <TextBlock Margin="0,26,193,0" HorizontalAlignment="Right" VerticalAlignment="Top" Text="Sortuj: "/>

        <ComboBox ItemsSource="{Binding SortOptions}"
                  SelectedItem="{Binding SelectedSortOption}"
                  DisplayMemberPath="Name"
                  Width="160"
                  Height="25"
                  VerticalAlignment="Top"
                  HorizontalAlignment="Right"
                  Margin="0,22,23,0" />



        <GroupBox Header="Nowe zadanie" Margin="10,71,10,0" MinWidth="420"
                  Height="159" VerticalAlignment="Bottom" Grid.Row="1">
            <Grid VerticalAlignment="Top" Height="135">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="149*"/>
                    <ColumnDefinition Width="242*"/>
                    <ColumnDefinition Width="177*"/>
                </Grid.ColumnDefinitions>
                <Label Content="Nazwa zadania: " Margin="10,5,0,0"
                       HorizontalAlignment="Left" VerticalAlignment="Top"/>
                <TextBox Style="{DynamicResource RoundedTextBox}" 
                         x:Name="tbTaskName" 
                         Height="40"
                         Margin="10,30,10,0" 
                         VerticalAlignment="Top" 
                         Text="{Binding NewTaskName}" 
                         Grid.ColumnSpan="3"
                         FontSize="18"
                         VerticalContentAlignment="Center"
                         Padding="5,0,0,0"/>
                <Label Content="Priorytet: " Margin="10,77,0,0"
                       HorizontalAlignment="Left" VerticalAlignment="Top"/>
                <ComboBox x:Name="cbPriority" Margin="10,102,0,0" Width="120"
                          HorizontalAlignment="Left" VerticalAlignment="Top"
                          ItemsSource="{Binding Path=PriorityCollection}"
                          SelectedItem="{Binding Path=NewPriority}">
                </ComboBox>

                <Label Content="Termin realizacji: " Margin="11,77,0,0"
                       HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Column="1"/>
                <DatePicker x:Name="dpDate" Margin="11,102,0,0"
                            HorizontalAlignment="Left"
                            SelectedDate="{Binding StartDate}" Grid.Column="1" FirstDayOfWeek="Monday" Height="33" Cursor="Hand" VerticalAlignment="Top"/>
                <Button Template="{DynamicResource RoundedButton}" 
                        Content="Dodaj zadanie"
                        Margin="0,93,10,0"
                        Width="120" Height="35"
                        Command="{Binding AddTask}"
                        Grid.Column="2" 
                        Background="#121212" Foreground="White" FontSize="14" FontFamily="Calibri" FontWeight="Bold">
                    <Button.CommandParameter>
                        <MultiBinding Converter="{StaticResource createTask}">
                            <Binding ElementName="tbTaskName" Path="Text" />
                            <Binding ElementName="dpDate" Path="SelectedDate"/>
                            <Binding ElementName="cbPriority" Path="SelectedIndex"/>
                        </MultiBinding>
                    </Button.CommandParameter>
                </Button>
            </Grid>

        </GroupBox>
    </Grid>
</Window>
